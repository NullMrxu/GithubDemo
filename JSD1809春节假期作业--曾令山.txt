
所有作业在2月12号上课之前 登录github  账号：NullMrxu  密码：2018tedu.cn
上传到上面GitDemo，上传文件信息为你的名字

春节假期作业安排：
一：用XMind 思维导图画出 java所有学过的知识点分6个阶段（保存格式为.xmind文件）
1.）java基础和面向对象
2.）javaSE和核心API
3.）HTML/CSS
4.）数据库和JDBC
5.）Servlt和JSP
6.）SpringMVC和Spring，MyBtis



二：以下55道常见面试题答案整理出来保存格式为.txt文件

1.基本数据类型有哪些及所占内存的字节数和位数，

int 4字节 32位
shot  2字节 16位
byte  1字节 8位
long 8字节 64位
double 8字节 64位
float 4字节 32位
char 2字节 16位
boolean 1/8字节 1位

linux中常用的指令

显示日期的指令： date
显示日历的指令：cal
简单好用的计算器：bc
man
退出用q，    man -f man
数据同步写入磁盘： sync
关机指令：shutdown
重启，关机： reboot, halt,poweroff
Linux共有七种执行等级：
--run level 0 :关机
--run level 3 :纯文本模式
--run level 5 :含有图形接口模式
--run level 6 :重新启动
改变文件的所属群组：chgrp
改变文件拥有者：chown
改变文件的权限：chmod
变换目录：cd
显示当前所在目录：pwd
建立新目录：mkdir
删除『空』的目录：rmdir
档案与目录的显示：ls
复制档案或目录：cp
移除档案或目录：rm
移动档案与目录，或更名：mv
取得路径的文件名与目录名：basename，dirname
由第一行开始显示档案内容：cat
从最后一行开始显示：tac（可以看出 tac 是 cat 的倒着写）
显示的时候，顺道输出行号：nl
一页一页的显示档案内容：more
与 more 类似，但是比 more 更好的是，他可以往前翻页：less
只看头几行：head
只看尾几行：tail
以二进制的放置读取档案内容：od
修改档案时间或新建档案：touch
档案预设权限：umask
配置文件档案隐藏属性：chattr
显示档案隐藏属性：lsattr
观察文件类型：file
寻找【执行挡】：which
寻找特定档案：whereis
寻找特定档案：locate
寻找特定档案：find
压缩文件和读取压缩文件：gzip，zcat
压缩文件和读取压缩文件：bzip2，bzcat
压缩文件和读取压缩文件：tar

2.do-while while的区别
do-while是先运行一次括号中的代码在判断条件是否满足
while是先判断条件是否满足如果满足就执行不满足则不运行

3.switch case中的表达式能是什么类型的
分支类型
java 1.6(包括)以前，只是支持等价成int 基本类型的数据:byte ,short,char,int(其他的都不可以）
java 1.7加入的新特性可以支持String类型的数据。
long是不可以的，就算是通过强制的转化也必须是转成int。

 gc的原理和好处	
GC是java中的垃圾回收机制，是由垃圾收集器Garbage Collection GC来实现的，GC是后台的守护进程。
它使用得java程序员在编写程序的时候不再需要考虑内存管理，由于有个垃圾回收机制，Java中的对象
不再有“作用域”的概念，只有对象的引用才有“作用域”。垃圾回收可以有效的防止内存泄露，有效
的使用可以使用的内存。
原理：垃圾回收通常是作为一个单独的低级别线程运行，不可以预知的情况下对内存对中已经没有引用
或者长时间没有使用的对象进行清理和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象
进行垃圾回收器对某个对象或所有对象进行垃圾回收，回收机制有分代复制垃圾回收和标记垃圾回收，
增量垃圾回收。

什么是递归：
方法调用方法本身，从而实现多层嵌套，只有满足条件才会逐层退出

String类的常用方法

String是一个char类型的数组，常用方法有
String.length(); 获取字符串长度
String.charAt(int); 获取字符串中的字符
String.substring(1,3); 截取
String1.compareTo(String2); 字符串比较
String1.concat("String2").concat(String3); 字符串拼接
str.indexOf("s");  字符串中单个字符查找
str.toLowerCase(); 转换为全小写
str.toUpperCase(); 转换为全大写
str.trim() 去两边空格
"abcdefg".statWith("abc"); 判断abc是否和abcdefg前面相等
"abcdefg".statendWith("efg"); 这个和上面相反
字符串的类型转换 
parseByte(str);
parseShort(str);
parseInt(str);.....

String为什么是不可变对象
因为String是final类型的不可以修改和被继承
就算两个字符串拼接也会创建一个新的String类型的对象

4.数组和集合的特点，数组和集合的转化
数组里面装的都是相同类型的数据或者对象的集合，它们都是在数组中有序的排列，
可以通过下标获取

集合转换为数组可以通过list.toArray(new String[list.size()]);实现
数组转换为集合可以通过Arrays.asList(String[] arr);实现
	
5. ArrayList和linkedList的底层实现
ArrayList底层是由数组实现，一旦我们实例化ArrayList无参构造函数默认为数组，初始化长度
为10，add方法底层实现如果增加的元素超过10个，那么ArrayList底层会新生成一个数组，长度为
原数组的1.5倍+1，然后将原来数组的内容复制到新的数组当中，并且将后续增加的内容都会放到
新数组中，如果当新数组无法容纳新的元素时，会再次重复该过程
linkedList底层的数据结构是基于双向循环链表的，且头结点中不存放数据，数据保存在节点实例
中

6. ArrayList和LinkedList的区别
ArrayList和LinkedList是两种截然不同的实现技术，ArrayList在集合末尾删除或添加元素所用
的时间是一致的，但是在列表中间的部分添加或删除时所用的时间就会大大增加，但是根据索引
查找元素的时候速度很快。LinkedList则相反，它在插入、删除集合中任何位置元素所花的时间是
一样的，但是他根据索引查询一个元素的时候却比较慢。在add和removeLinkedList比较占优势，
因为ArrayList要移动数据

7.List和set的区别，HashMap的特点
Set遍历速度快，插入删除速度快但是随机访问速度比较慢，而且比list多占用一个指针的存储空间
List遍历速度快，随机访问速度快，而插入删除速度慢，必须之前知道数组元素个数，因为申请
内存是连续长度明确的
HashMap遍历速度慢，插入删除速度快，随机访问速度快，适合海量数据存储

8.String为什么是不可变对象,String中常用的方法
上面做过了

9.String和StringBuider的区别
String对象是不可变的，每次使用System.String类中的方法之一时都会在内存中创建一个新的字符串对象
这就需要为该对象分配新的空间
StringBuider是动态对象允许扩充它所封装的字符串中字符的数量，但是必须指定最大字符数量
当修改StringBuilder时，在达到容量之前，它不会为其自己重新分配空间，当达到容量时，将自动分配新
的空间且容量翻倍。可以使用重载的构造函数之一来指定StringBuilder类的容量

StringBuider和StringBuffer的区别，
StringBuider是非线程安全的，执行速度快
StringBuffer是线程安全的，执行速度慢

Vector和ArrayList的区别，HashMap和  Hashtable
Vector的方法都是同步的，是线程安全的ArrayList的方法不是，
由于线程的同步比如影响性能，因此ArrayList的性能比Vector好

Hashtable和HashMap它们的性能方面比较相似
Vector和Arraylist，比如Hashtable是方法同步的，而HashMap不是

10. 什么是面向对象，什么是类，什么是对象
面向对象：面向对象其实是一种程序设计规范，同时也是一种程序开发的方法。
类：类是具有相同属性和方法的一组对象的集合。为属于该类的所有对象提供了统一的
抽象描述，其内部包括属性和方法两个主要的部分。
对象：对象值得是类的实例，将对象作为程序的基本单元，将程序和数据封装其中，
以提高软件的重用性、灵活性和扩展性

11.面向对象有些什么特点？面向对象之间的关系 ？
封装：将属性和方法封装在类中，而类又被封装在包中，包被封装在项目中，它的目标就是要将软件的部件
实现 高内聚，低耦合 防止程序互相依赖而带来的变动影响
继承：在定义一个类的时候，可以在一个已经存在的类的基础上进行基础，继承之后子类共享父类的数据
和方法的机制，提高了软件的可重用性和可扩展性。
多态：即多种形态，在面向对象编程当中，你有相同的接口，以及使用该接口的不同形式：即各种不同的
动态绑定方法的版本。
抽象：abstract修饰符，可以修饰方法，类，当我们存在多各类相同的功能，但具体实现不同的时候，
我们这时候向上抽取方法的定义而不抽取主体部分。抽象类不允许创建对象

12.什么是构造器？有什么作用？
构造器是和类名相同但无返回类型的方法，
用于当前某一对象的实例化，并将当前或某一对象返回要得到一个类的实例时，一般要运行构造函数

13.什么是序列化，有什么作用
让一个类继承serializable接口，我们的对象并不止存在内存中，还需要传输网络，或者保存起来
下次加载出来使用，所有需要序列化技术

14. 常用的流有哪一些
InputStream和OutputStream---字节流
InputStreamReader和OutputStreamWriter---字符流

15.线程的生命周期，线程的创建方式，什么是同步，异步
线程的五种状态：new(新建)--->Runnable(就绪)--->Running(运行)--->阻塞(Blocked)--->死亡(Dead)

继承Thread类，重写run()方法，然后new这个对象的实例，创建一个线程的实例，在调用start()方法
实现Runnable接口，重写run方法，调用 new Thread(runnable)的方式创建线程，再调用start()方法
实现Callable接口，重写call()方法。callable雷诗雨Runnable接口，是属于Executor框架中的功能
类是JDK1.5中引入的新特性

16.什么是死锁
线程死锁是由两个或者多个线程互相持有对方所需要的资源，导致这些线程处于等待状态，无法
前往执行。当线程进入对象的synchronized代码块是，便占有了资源，直到它退出了该代码块或者
调用wait方法，才释放资源，在此期间其他线程将不能进入该代码块。当线程互相持有所需要的资源
时，会互相等待对方释放资源，如果都不主动释放所占有的资源，将产生死锁。

17.什么是数据库
存储数据的仓库，而数据库中分为多张表，每张表又有多条记录，有条理的管理数据

18.什么是ddl，dml语句 他们有什么特点，数据库中的内连接和外连接，以及左外和右  外连接的区别
DDL是数据定义语音 像建表，删表等，
DML是数据操作语音 像插入一条数据到表，或者修改表中数据
特点：一个是对数据库和表进行操作一个是对数据表中数据进行操作
内连接：只包含符合连接条件的行，参与连接的两个表都应该符合连接条件
外连接：连接结果不仅包含符合条件的行同时也包含自身不符合条件的行
左外连接：左边表数据全部保留，右边表保留符合连接条件的行
右外连接：右边表数据全部保留，左边表保留符合连接条件的行

19.什么是事务，他的特点有哪一些
事务是访问并可能更新数据中各种数据项的一个程序执行单元，
特点：事务是为了保证对统一数据表操作的一致性

20.怎么提高数据库的性能
让数据库结构规范，减少被频繁访问的核心表的数量，并在这些核心表上重点优化索引，对应统计
类应用，如果可能应写成触发器和存储过程，

21.什么是索引，什么是视图，他们有什么特点，优点和缺点
创建索引可以大大提高系统的性能：
第一：通过创建唯一性索引，可以保证数据表中的唯一性。
第二：可以大大加快数据的检索速度，这也是创建索引的主要原因
第三：可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。
第四：在使用风阻和排序自居进行数据检索时，统一可以显著减少查询中风阻和排序的时间。
第五：通过使用索引可以在查询的过程中，使用优化隐藏器，提高系统的性能。

视图：是一个虚拟表，是一组数据的逻辑表示，本质是对应于一条SELECT语句
结果集被赋予的名字。即视图名字。
优点：使用视图，可以定制用户数据，聚焦特定的数据。
	使用视图可以简化数据的操作
	使用视图，基表中的数据就有一定安全性
	可以合并分离数据，创建分区视图
缺点：性能比较差即使是视图的一个简单查询，SQL也要把它变成一个复杂的结合体，需要花费一定时间
	修改限制：当用户视图修改视图的某些信息时，数据库必须转化为对基本表的某些信息的修改

22.什么是存储过程，方法和存储过程有什么区别，什么是触发器
存储过程可以说是一个记录集吧，它是由T-SQL语句组成的代码块，这些T-SQL语句
代码就像一个方法一样实现一些功能，然后再给这个代码块取个名字，用的时候就调用

方法，你需要把它放在存储过程中，或是，触发器中，被调用， 然后执行。而存储过程的话，写好了
之后就可以直接用。但是不能像方法一样被其他的存储过程，或者是触发器去调用。

触发器是一种特殊的存储过程，它在视图更改触发器所保护的数据时自动更新

23.分页怎么实现
写一个pageBean的类，定义pageNum、pageSize、totalRecord、totalPage、startIndex、list、start、end
属性　pageNum、pageSize、totalRecord：通过构造方法就能得到。pageNum请求页面提交过来的参数，
pageSize是自己设置的，totalRecord是查询数据库得到的　totalPage、startIndex、start、end是通过内部算法得出，
list需要通过查询数据库在通过set方式得到。

24.怎么实现分布式管理
提高软件的内聚性和透明性

25.什么是servlet，servlet的生命周期
servlet是一个标准的HTTP协议请求的类。
生命周期：
	实例化 服务器启动会自动实例化调用构造方法
	初始化 init()
	就绪 (调用) service方法 (doGet,doPost)
	销毁 destroy


26.什么是servlet的监听和拦截器，什么是mvc
监听器(Listener)实现了javax.servlet.ServletContextListener接口的服务端程序随web应用
的启动而启动，只初始化一次，web应用的停止而销毁主要做一些初始化的内容添加工作
拦截器是在面向切面编程中应用的，就是在service或者一个方法前调用一个方法，或者方法
后调用一个方法。是基于java反射机制。拦截器不是在web.xml比如在Spring.xml中配置

MVC：是一种架构思想
M:模型
V：视图
C：控制器

27.什么是重定向，重定向和转化有什么区别
重定向：以前request中存放的变量全部失效进入一个行的request作用域，重定向将条转到新的页面
转发：以前的request中存放的变量不会失效，就像吧两个页面拼到一起，转发URL保持不变

28.jsp和servlet有什么区别
JSP本身就是servlet，是servlet的扩展，更加强调的是前端页面的展示。jsp编译之后会生成
“servlet类”，servlet和jsp最主要的不同点在于，servlet的应用逻辑是java文件中的，并且完全
从HTML页面分离出来的，而jsp是java代码和HTML的组合成一个.jsp文件，jsp偏重于视图，servlet
偏重于逻辑代码

29.jsp的内置对象有哪一些，指令有哪一些
一共有九个：
pageContext，request，response，session，application
exception，out，config，page
指令：page、include、taglib

30.get和post的区别
get请求会在浏览器URL栏显示用户提交的数据，而post将会隐藏相对于get更加安全，
post是通过上下文的形式传输数据，所以一次性提交的数据量比get更多

31.session和cookie的区别
session（会话）数据保存在服务端，cookie数据保存在客户端
它们都是可以用来保存私密的东西，统一也都有有效期的说法，区别在于session是放在服务器端
过期与否取决于服务器的设定，cookie是存放在客户端，过期与否可以在cookie生成的时候设置进去
session相对于cookie来说更加安全但是访问增多会比较占用服务器的性能，比较私密的信息
可以放在session中而一些其他信息可以放在cookie中

32.spring的优缺点
spring是一个轻量级的DI和AOP容器框架，spring是非侵入的，也就是说不需要new的方式创建
对象，而是依赖注入的方式，基于spring开发的应用一般不需要依赖于spring的类
spring对其他主流框架提供了很好的集成支持，
使用SpringIOC容器对象之间的依赖关系交给Spring，降低组件之间的耦合性，让我们
更加专注于应用逻辑，Spring属于低侵入，代码污染极低，并且Spring的高度可开发性并
不强制依赖Spring开发者可以自由选择Spring部分或全部。

jsp中要写很多代码，控制器过于灵活少了一个公用的控制器，
Spring不支持分布式，这也是EJB仍然在用的原因之一。

33.spring mvc的流程
DispatcherServlet前端控制器接收发过来的请求，交给HandlerMapping处理映射器
HandlerMapping处理器映射器，根据请求路径找到对应的HandlerMapping处理适配器(处理
器适配器就是那些拦截器或Controller)HandlerAdapter处理器适配器，处理一些功能请求，
返回一个ModelAndView对象(包括模型数据、逻辑视图名)ViewResolver视图解析器，先根据
ModelAndView对象中的设置的View解析具体视图，然后再将Model模型中的数据渲染到View上

34.常用的注解和注入方式
@Controller,@Service,@Autowired,@RequestMapping,@RequestParam
@ModelAttribute,@Cacheable,@CacheFlush
一般用于方法上面或者类上面，有参数可以在后面在加括号和参数

35.mybatis和ibatis的区别
ibatis是mybatis的前身，它们有很多地方相似，但是在sqlMap里面已经有很多地方变动了

36.mybatis和jdbc的关系
Java程序都是通过JDBC来访问数据库的。JDBC定义了一系列的接口规范，
具体的实现是由各数据库厂商去实现，是一种典型的桥接模式。
MyBatis是一个支持普通SQL查询，存储过程和高级映射的优秀持久层框架。MyBatis
可以使用简单的XML或注解用于配置和原始映射，将接口的Java的POJO映射成数据库中的记录
MyBatis是对JDBC的封装。

37.mybaits和hibernate的区别
MyBatis学习门槛低，简单易学，程序员直接编写原生态sql，可严格控制sql执行性能，
灵活度高，非常适合对关系数据模型要求不高的软件开发，例如互联网软件、企业运营类软件等
因为这类软件需要变化频繁，一旦需求变化要求成功输出迅速，但是灵活的前提是myBatis无法
做到数据库无关性，如果需要实现支持多种数据库的软件则需要自定义多套sql映射文件，工作量大

Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件(例如固定需求的定制化软件)
如果用hibernate开发可以节省很多代码，提高效率。但是Hibernate的学习门槛高，要精通的
门槛更高，而且设计O/R映射，在性能和对象模型之间如何权衡，以及怎么用好Hibernate需要
具有很强的经验和能力才行


38.什么是ajax，ajax的底层实现，ajax中常用的提交方式有哪一些
异步的JavaScript和XML，是一种使用标准的新方法。
Ajax的原理：通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后
用JacaScript来操作DOM而更新页面
提交方式：
 $.post(）
 $(function(){})
 $.ajax({})

39.线程池，连接池的原理
池的原理其实就是提前保存大量资源，以备不时之需

线程池，类似于操作系统中的缓冲区概念，他的流程：先启动若干数量的线程，让这些线程处于
睡眠状态，当客户端有新的请求时，就会唤醒线程池中的某个线程，让它来处理客户端的请求
当处理完这个请求后线程又处于睡眠状态。如果高峰期线程池中全部线程都已经被唤醒，那么新
的请求过来时就需要等待。

数据库连接池因为每次操作都打开一个物理连接，使用都关闭连接这样造成系统的性能低下，
数据库连接池的解决方案是在应用程序启动时简历足够的数据库连接，并将这些连接组成一个连接
池，由应用程序动态的对池中的连接进行申请、使用和释放，对于多于连接池中连接数的并发请求
应该在请求队列中排队等待。并且应用程序可以根据池中连接的使用率动态增加或减少池中的
连接数。

40.什么是jdbc
JDBC是一种用于执行SQL语句的JAVA API，可以为多种关系数据库提供统一访问，它由一组用
JAVA语音编写的类和接口组成，JDBC提供了一种基准，据此可以构建更高级的工具和接口，使
数据库开发人员能够编写数据库应用程序。

41.jdbc连接数据库的步骤
1.加载JDBC驱动
2.建立数据库连接Connection
3.创建执行SQL的语句Statement
4.处理执行结果ResultSet
5.释放资源

42.statement和prepstateme的区别
preparedStatement是预编译也是statement的子接口
preparedStatement的效率相对于statement要高而且数据库的版本越高数据库对pre的支持就越好


43.怎么解决高并发
1.不要频繁的new对象对于在整个应用中只需要存在一个实例的类使用单例模式，对于String的
连接操作，使用StringBuffer或者StringBuilder对于utility类型的类通过静态方法来访问。
2.避免使用错误的方式，如Exception可以控制方法推出，但是Exception要保留stacktrace消耗
性能，除非必要不要使用instanceof做条件判断，尽量使用比的条件判断方式，使用java中效率高
的类比如ArrayList比Vector性能好


44.什么是分布式管理
分布式管理和并行管理是为了提高并行处理速度采用的两种不同的体系架构
分布式处理是将不同地点的或具有不同功能的，或拥有不用数据的多太计算机通过
通信网络连接起来再控制系统的统一管理控制下，协调地完成大规模的信息处理任务。

45.mysql中日期的加减法
   select (date '2015-04-10' - date '2014-03-11') from dual 
	select date_add(now(), interval 1 day); - 加1天
	select date_add(now(), interval 1 hour); -加1小时
	select date_add(now(), interval 1 minute); - 加1分钟
	select date_add(now(), interval 1 week);-加1周
	select date_add(now(), interval 1 month);-加1月
	select date_add(now(), interval 1 quarter);-加1季
	select date_add(now(), interval 1 year);-加1年

46.ajax为什么要实现异步刷新
因为传统的处理请求时，响应的方式有转发或重定向，无论是哪种，最终都会直接呈现某个页面
给客户端，这样做的缺在于用户体验不好，流量消耗可能较大，不适合多种不同的客户端

47.服务端和客户端传输数据有哪些方式
客户端发送一个对象，服务端返回一个对象，
客户端发送一个对象，服务端放回一个Stream对象
客户端发送Stream对象，服务端返回一个简单对象
客户端和服务端都传输的是Stream对象


48.怎么优化模糊查询
在SQL语句中使用like模糊查询时，尽量避免，因为模糊查询时比较慢的
可以使用索引，但是需要改写SQL并创建reverse函数索引。

49.怎么优化索引以及聚合索引
主键就是聚集索引
只要建立索引就能显著提高查询速度
把所有需要提高查询速度的字段都加进聚集索引，以提高查询速度
用聚合索引比用不是聚合索引的主键速度快
用聚合索引比用一般的主键作order by时速度快，特别是在小数据量情况下
使用聚合索引内的时间段，搜索时间会按数据占整个数据表的百分比成比例减少，而无论聚合索引使用了多少个

50.mvc的优缺点
MVC优点：
各司其职，互不干涉，层次分明，相应的代码放在相应的层中不会影响其他层中的代码
有利于开发中的分工，以及组件的重用。
缺点：增加了系统结构的的实现的复杂性，第一简单的界面，严格遵循MVC使模型、视图、控制器
分离会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率

51.mybatis中#和$符的区别
使用#意味着使用预编译的语句，在使用jdbc是的preparedstatement，sql语句如果存在参数则
会使用?作为占位符，这种方式可以防止sql注入，
使用$是的sql不会当做字符串处理，

52.说出在JSP页面里是怎么分页的
vue的 v-for 数据迭代

title: JSP分页技术实现
summary:使用工具类实现通用分页处理
author: evan_zhao


53.存储过程和函数的区别
存储过程：可以使得对的管理，以及显示关于及其他用户信息的工作容易得多。存储过程是SQL
语句可选孔子流程语句的预编译集合，以一个名称存储并作为一个单元处理。存储过程存储在
数据库内，可由应用程序通过一个调用执行，而且允许用户声明变量、有条件执行以及其他强大的编程
功能。存储过程可包含程序流、逻辑以及对数据库的查询。它们可以接受参数、输出参数、返回单个
或多个结果集以及返回值。
函数：是由一个或多个SQL语句组成的子程序，可用于封装代码以便重新使用。自定义函数诸多限制
有许多语句不能使用，许多功能不能实现。函数可以直接引用返回值，用表变量返回记录集。但是
用户定义函数不能用于执行一组修改全局数据库状态的操作。


54.数据库中的锁，什么是悲观锁，什么是乐观锁？
 乐观锁是一种思想，具体实现是，表中有一个版本字段，第一次读的时候，获取到这个字段。处理
完业务逻辑开始更新的时候，需要再次查看该字段的值是否和第一次的一样。如果一样更新，反之拒绝。
之所以叫乐观，因为这个模式没有从数据库加锁。

悲观锁是读取的时候为后面的更新加锁，之后再来的读操作都会等待。这种是数据库锁
乐观锁优点程序实现，不会存在死锁等问题。他的适用场景也相对乐观。阻止不了除了
程序之外的数据库操作。悲观锁是数据库实现，他阻止一切数据库操作。

55.简述二叉树原理。
二叉树是一种重要的数据结构，与数组、向量、链表都是一种顺序容器，它们提供了按位置
访问数据的手段，但是有一个缺点，它们都是按照位置来确定数据，想要通过只来获取数据，
只能通过遍历的方式。而二叉树在很大程度上解决了这个缺点，二叉树是按值来保存元素，页按
值来访问元素。

二叉树有一个个节点组成，一个节点最多只能有两个子节点，从根节点开始左右扩散，分左子节点
和右子节点向下一直分支二叉树是由递归定义的
